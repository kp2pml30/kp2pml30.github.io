</br><h1>Which methods an <code><span class="highlight-type">Any</span></code> type should have?</br></h1>Here under <code><span class="highlight-type">Any</span></code> root of objects hierarchy is meant</br><h2>Why there should be no <code>hashCode</code>, <code>equals</code> in <code><span class="highlight-type">Any</span></code> (and entire <code><span class="highlight-type">Comparable</span></code> as a type)</br></h2>These methods look like a Java legacy, as they prohibit modifications, that make collections work different for different types. For instance, <code><span class="highlight-type">Map</span></code> can be implemented via <code><span class="highlight-type">Set</span></code>, if pair comparator compares only first elements (same with <code>hashCode</code> and <code>equals</code>). Instead of all this methods, their users must accept a <code><span class="highlight-type">Comparator</span></code> and so on, where there may be a &quot;default&quot; that does language-specific things</br><h2>Why there should be no <code>equals</code>?</br></h2><code>equals</code> semantics may be different:<ul><li> It may compare pointers</li><li> It may compare values</li><li> It may compare values in a special way (<math><mo>&#x2212;</mo><mn>0</mn><mo>&#x2260;</mo><mo>+</mo><mn>0</mn></math>)</br></li></ul>There is also an issue with &quot;pointers comparison&quot;, as single dispatch can&#39;t correctly handle all <code><span class="highlight-const">null</span></code>/<code><span class="highlight-const">undefined</span></code> cases</br><h2>Should there be a <code>toString</code>?</br></h2>Well, there are two issues with <code>toString</code>:<ol type="1"><li> I am pretty sure that default <code>toString</code> signature is incorrect. Why is it <code><span class="highlight-const">this</span>.toString<span class="highlight-punct">(</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> <span class="highlight-type">String</span></code> and not <code><span class="highlight-const">this</span>.toString<span class="highlight-punct">(</span>sb<span class="highlight-punct">:</span> <span class="highlight-type">StringBuilder</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> void</code>? First variant has extremely degraded performance, while second variant allows just making a stub</li><li> Why is it called <code>toString</code>? It should be called <code>toDebugString</code>. And should it be possible to override such method? That is probably a philosophical question, I would tend to answer &quot;no&quot;, but who knows</br></li></ol><h2>Proposed <code><span class="highlight-type">Any</span></code> type</br></h2><pre class="language-any"><code class="language-any"><span class="highlight-kw">class</span> <span class="highlight-type">Any</span> <span class="highlight-punct">{</span>
	<span class="highlight-kw">final</span> <span class="highlight-kw">fn</span> toDebugString<span class="highlight-punct">(</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> <span class="highlight-type">String</span> <span class="highlight-punct">{</span>
		<span class="highlight-kw">let</span> sb = <span class="highlight-kw">new</span> <span class="highlight-type">StringBuilder</span><span class="highlight-punct">(</span><span class="highlight-punct">)</span>
		<span class="highlight-const">this</span>.toDebugString<span class="highlight-punct">(</span>sb<span class="highlight-punct">)</span>
		<span class="highlight-kw">return</span> sb.getString<span class="highlight-punct">(</span><span class="highlight-punct">)</span>
	<span class="highlight-punct">}</span>

	<span class="highlight-kw">open</span> <span class="highlight-kw">fn</span> toDebugString<span class="highlight-punct">(</span>sb<span class="highlight-punct">:</span> <span class="highlight-type">StringBuilder</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> <span class="highlight-type">Unit</span> <span class="highlight-punct">{</span>
		<span class="highlight-type">Runtime</span>.dump<span class="highlight-punct">(</span><span class="highlight-const">this</span><span class="highlight-punct">,</span> sb<span class="highlight-punct">)</span>
	<span class="highlight-punct">}</span>
<span class="highlight-punct">}</span>

<span class="highlight-kw">namespace</span> <span class="highlight-type">Runtime</span> <span class="highlight-punct">{</span>
	<span class="highlight-kw">fn</span> isSameReference<span class="highlight-punct">(</span>l<span class="highlight-punct">:</span> <span class="highlight-type">Any</span><span class="highlight-punct">,</span> r<span class="highlight-punct">:</span> <span class="highlight-type">Any</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> <span class="highlight-type">Boolean</span>
	<span class="highlight-kw">fn</span> getSystemHashCode<span class="highlight-punct">(</span>a<span class="highlight-punct">:</span> <span class="highlight-type">Any</span><span class="highlight-punct">)</span><span class="highlight-punct">:</span> <span class="highlight-type">USize</span>
<span class="highlight-punct">}</span></code></pre>