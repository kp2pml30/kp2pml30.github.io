{
	title: "Which methods an `Any` type should have?",
	date: "2023 ?? ??",
}
### body ###
%p
	:kp2md
		Here under `Any` root of objects hierarchy is meant
%h2
	:kp2md
		Why there should be no `hashCode`, `equals` in `Any` and `Comparable` as a type
%p
	:kp2md
		These methods look like a Java legacy, as they prohibit modifications, that make collections work different for different types. For instance, `Map` can be implemented via `Set`, if pair comparator compares only first elements (same with `hashCode` and `equals`). Instead of all this methods, their users must accept a `Comparator` and so on, where there may be a &quot;default&quot; that does language-specific things
%h2
	:kp2md
		Why there should be no `equals`?
%p
	:kp2md
		`equals` semantics may be different:
%ul
	%li It may compare pointers
	%li It may compare values
	%li
		:kp2md
			It may compare values in a special way ($$-0 != +0$$)
%p
	:kp2md
		There is also an issue with "pointers comparison", as single dispatch can't correctly handle all `null`/`undefined` cases
%h2
	:kp2md
		Should there be a `toString`?
%p:kp2md Well, there are two issues with `toString`:
%ul
	%li
		:kp2md
			I am pretty sure that default `toString` signature is incorrect. Why is it `this.toString(): String` and not `this.toString(sb: StringBuilder): void`? First variant has extremely degraded performance, while second variant allows just making a stub
	%li
		:kp2md
			Why is it called `toString`? It should be called `toDebugString`. And should it be possible to override such method? That is probably a philosophical question, I would tend to answer &quot;no&quot;, but who knows
%h2
	:kp2md
		Proposed `Any` type
:kp2code
	class Any {
		final fn toDebugString(): String {
			let sb = new StringBuilder()
			this.toDebugString(sb)
			return sb.getString()
		}

		open fn toDebugString(sb: StringBuilder): Unit {
			Runtime.dump(this, sb)
		}
	}

	namespace Runtime {
		fn isSameReference(l: Any, r: Any): Boolean
		fn getSystemHashCode(a: Any): USize
	}
