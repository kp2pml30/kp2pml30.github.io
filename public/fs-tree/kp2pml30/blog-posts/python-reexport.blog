<h1>How to do a re-export in python properly?</br></h1>I stumbled upon this problem while compiling numpy for wasm32-wasip1. Dynamic linking isn&#39;t supported out of the box there, so all modules must be statically linked into CPython. However, numpy uses relative imports, while native modules can&#39;t have dots in name</br><h2>V0 (naive)</br></h2><pre class="language-any"><code class="language-any"><span class="highlight-kw">from</span> _native_module <span class="highlight-kw">import</span> *</code></pre>Well, this obviously won&#39;t work because of... Cyclic imports!</br>However, <a href="https://peps.python.org/pep-0562/">pep-0562</a> comes for rescue. It allows to override <code><span class="highlight-const">__getattr__</span></code> on module level, though usage is not that straight forward</br><h2>V1</br></h2><pre class="language-any"><code class="language-any"><span class="highlight-kw">import</span> _native_module as _imp
<span class="highlight-kw">def</span> <span class="highlight-const">__getattr__</span><span class="highlight-punct">(</span>name<span class="highlight-punct">)</span><span class="highlight-punct">:</span>
	<span class="highlight-kw">return</span> getattr<span class="highlight-punct">(</span>_imp<span class="highlight-punct">,</span> name<span class="highlight-punct">)</span></code></pre>Or:</br><pre class="language-any"><code class="language-any"><span class="highlight-kw">def</span> <span class="highlight-const">__getattr__</span><span class="highlight-punct">(</span>name<span class="highlight-punct">)</span><span class="highlight-punct">:</span>
	<span class="highlight-kw">return</span> getattr<span class="highlight-punct">(</span>_imp<span class="highlight-punct">,</span> name<span class="highlight-punct">)</span>
<span class="highlight-kw">import</span> _native_module as _imp</code></pre>Neither of them works, because of the cyclic import (again)</br><h2>V2 (correct)</br></h2><pre class="language-any"><code class="language-any"><span class="highlight-kw">def</span> <span class="highlight-const">__getattr__</span><span class="highlight-punct">(</span>name<span class="highlight-punct">)</span><span class="highlight-punct">:</span>
	<span class="highlight-kw">import</span> _native_module as _imp
	<span class="highlight-kw">return</span> getattr<span class="highlight-punct">(</span>_imp<span class="highlight-punct">,</span> name<span class="highlight-punct">)</span></code></pre>This one finally worked. Why so?<ul><li> Python executes bytecode sequentially, so <code><span class="highlight-const">__getattr__</span></code> has to be defined before importing a circular module</li><li> <code><span class="highlight-kw">import</span> _common as _imp</code> appears to assign to <code>_imp</code> after initializing the module, so it&#39;s more like the following<pre class="language-any"><code class="language-any">mod = new_mod<span class="highlight-punct">(</span><span class="highlight-punct">)</span>
init_mod<span class="highlight-punct">(</span>mod<span class="highlight-punct">,</span> <span class="highlight-str">&#39;common&#39;</span><span class="highlight-punct">)</span>
_imp = mod</code></pre>And not with the last two lines swapped</br></li></ul>Moreover, assignment should work just fine. However, I think <code><span class="highlight-kw">from</span> ... <span class="highlight-kw">import</span> *</code> won&#39;t. because <code><span class="highlight-const">__all__</span></code> is missing